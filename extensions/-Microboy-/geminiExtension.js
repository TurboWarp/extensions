// Name: Gemini Extension
// ID: geminiExtension
// Description: Allows using Google Gemini within Scratch projects. In fact, this extension is generated by Google Gemini itself!
// By: -Microboy- <https://scratch.mit.edu/users/-Microboy-/>
// Original: -Microboy-
// License: MPL-2.0

class GeminiExtension {
  getInfo() {
    return {
      id: 'geminiExtension',
      name: 'Gemini',
      blocks: [
        {
          opcode: 'sendGeminiRequest',
          blockType: Scratch.BlockType.REPORTER,
          text: 'generate response [REQUEST]',
          arguments: {
            REQUEST: {
              type: Scratch.ArgumentType.STRING,
              defaultValue: 'Hello!'
            }
          }
        }
      ]
    };
  }

  async sendGeminiRequest(args) {
    const apiKey = 'AIzaSyCmgSxbXcoqsFc_Bclhr-tcvRnKqt71s3w'; // Replace with your actual API key
    const requestText = args.REQUEST;
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`;

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: requestText
          }]
        }]
      })
    });

    const data = await response.json();

    // Get formatted JSON string
    const responseString = JSON.stringify(data, null, 2);

    // Try basic parsing (replace "text" with actual property name if different)
    const responseStart = responseString.indexOf('"text":');
    if (responseStart !== -1) {
      const textStartIndex = responseStart + '"text": "'.length;
      const textEndIndex = responseString.indexOf('"', textStartIndex + 1);
      if (textEndIndex !== -1) {
        return responseString.substring(textStartIndex, textEndIndex); // Return extracted text
      }
    }

    // If parsing fails, return original string
    return responseString;
  }
}

Scratch.extensions.register(new GeminiExtension());
